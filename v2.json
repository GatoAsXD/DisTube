{"meta":{"generator":"0.10.0","format":21,"date":1624025636232},"custom":null,"classes":[{"name":"DisTube","description":"Class representing a DisTube.","extends":[[["EventEmitter"]]],"construct":{"name":"DisTube","description":"Create new DisTube.","params":[{"name":"client","description":"Discord.JS client","type":[[["Discord","."],["Client"]]]},{"name":"otp","description":"Custom DisTube options","optional":true,"default":"{}","type":[[["DisTubeOptions"]]]}],"examples":["const Discord = require('discord.js'),\r    DisTube = require('distube'),\r    client = new Discord.Client();\r// Create a new DisTube\rconst distube = new DisTube(client, { searchSongs: true });\r// client.DisTube = distube // make it access easily\rclient.login(\"Your Discord Bot Token\")"]},"props":[{"name":"version","description":"DisTube's current version.","type":[[["string"]]],"meta":{"line":103,"file":"DisTube.js","path":"src"}},{"name":"client","description":"Discord.JS client","type":[[["Discord","."],["Client"]]],"meta":{"line":126,"file":"DisTube.js","path":"src"}},{"name":"guildQueues","description":"Collection of guild queues","type":[[["Discord","."],["Collection","<"],["string",", "],["Queue",">"]]],"meta":{"line":132,"file":"DisTube.js","path":"src"}},{"name":"options","description":"DisTube options","type":[[["DisTubeOptions"]]],"meta":{"line":138,"file":"DisTube.js","path":"src"}},{"name":"filters","description":"DisTube filters","type":[[["Filter"]]],"meta":{"line":145,"file":"DisTube.js","path":"src"}}],"methods":[{"name":"_resolveSong","description":"Resolve a Song","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"Youtube url | Search string | {@link Song}","type":[[["string"]],[["Song"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Song","|"],["Array","<"],["Song",">>"]]],"description":"Resolved Song"},"meta":{"line":189,"file":"DisTube.js","path":"src"}},{"name":"_handleSong","description":"Handle a Song or an array of Song","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"{@link Song} | {@link SearchResult}","type":[[["Song"]],[["SearchResult"]]]}],"async":true,"meta":{"line":212,"file":"DisTube.js","path":"src"}},{"name":"play","description":"Play / add a song or playlist from url. Search and play a song if it is not a valid url.","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"play\")\r        distube.play(message, args.join(\" \"));\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"Youtube url | Search string | {@link Song} | {@link SearchResult}","type":[[["string"]],[["Song"]],[["SearchResult"]]]}],"async":true,"meta":{"line":239,"file":"DisTube.js","path":"src"}},{"name":"playSkip","description":"`@2.0.0` Skip the playing song and play a song or playlist","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"playSkip\")\r        distube.playSkip(message, args.join(\" \"));\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"Youtube url | Search string | {@link Song} | {@link SearchResult}","type":[[["string"]],[["Song"]],[["SearchResult"]]]}],"async":true,"meta":{"line":264,"file":"DisTube.js","path":"src"}},{"name":"playCustomPlaylist","description":"`@2.1.0` Play or add array of Youtube video urls.\r{@link DisTube#event:playList} or {@link DisTube#event:addList} will be emitted\rwith `playlist`'s properties include `properties` parameter's properties such as\r`user`, `songs`, `duration`, `formattedDuration`, `thumbnail` like {@link Playlist}","examples":["let songs = [\"https://www.youtube.com/watch?v=xxx\", \"https://www.youtube.com/watch?v=yyy\"];\r    distube.playCustomPlaylist(message, songs, { name: \"My playlist name\" });"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"urls","description":"Array of Youtube url","type":[[["Array","<"],["string",">"]]]},{"name":"properties","description":"Additional properties such as `name`","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"playSkip","description":"Whether or not play this playlist instantly","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"meta":{"line":289,"file":"DisTube.js","path":"src"}},{"name":"_handlePlaylist","description":"PLay / add a playlist","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"arg2","description":"Youtube playlist url | a Playlist","type":[[["string"]],[["Array","<"],["Song",">"]],[["Playlist"]]]},{"name":"skip","description":"Skip the current song","default":false,"type":[[["boolean"]]]}],"async":true,"meta":{"line":310,"file":"DisTube.js","path":"src"}},{"name":"search","description":"`@2.0.0` Search for a song. You can customize how user answers instead of send a number.\rThen use {@link DisTube#play|play(message, aResultFromSearch)} or {@link DisTube#playSkip|playSkip()} to play it.","params":[{"name":"string","description":"The string search for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["SearchResult",">>"]]],"description":"Array of results"},"meta":{"line":344,"file":"DisTube.js","path":"src"}},{"name":"_searchSong","description":"Search for a song, fire {@link DisTube#event:error} if not found.","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"name","description":"The string search for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Song"]]],"description":"Song info"},"meta":{"line":365,"file":"DisTube.js","path":"src"}},{"name":"_newQueue","description":"Create a new guild queue","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"Song to play","type":[[["Song"]]]}],"async":true,"returns":[[["Promise","<"],["Queue",">"]]],"meta":{"line":398,"file":"DisTube.js","path":"src"}},{"name":"_deleteQueue","description":"Delete a guild queue","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"meta":{"line":427,"file":"DisTube.js","path":"src"}},{"name":"getQueue","description":"Get the guild queue","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"queue\") {\r        let queue = distube.getQueue(message);\r        message.channel.send('Current queue:\\n' + queue.songs.map((song, id) =>\r            `**${id+1}**. [${song.name}](${song.url}) - \\`${song.formattedDuration}\\``\r        ).join(\"\\n\"));\r    }\r});"],"params":[{"name":"message","description":"The guild ID or message from guild channel.","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue","nullable":true},"meta":{"line":453,"file":"DisTube.js","path":"src"}},{"name":"_addToQueue","description":"Add a video to queue","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]},{"name":"song","description":"Song to add","type":[[["Song"]]]},{"name":"unshift","description":"Unshift","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Queue"]]],"meta":{"line":469,"file":"DisTube.js","path":"src"}},{"name":"_addSongsToQueue","description":"Add a array of videos to queue","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]},{"name":"songs","description":"Array of song to add","type":[[["Array","<"],["Song",">"]]]},{"name":"unshift","description":"Unshift","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Queue"]]],"meta":{"line":489,"file":"DisTube.js","path":"src"}},{"name":"pause","description":"Pause the guild stream","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":506,"file":"DisTube.js","path":"src"}},{"name":"resume","description":"Resume the guild stream","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":521,"file":"DisTube.js","path":"src"}},{"name":"stop","description":"Stop the guild stream","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"stop\") {\r        distube.stop(message);\r        message.channel.send(\"Stopped the queue!\");\r    }\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"meta":{"line":545,"file":"DisTube.js","path":"src"}},{"name":"setVolume","description":"Set the guild stream's volume","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"volume\")\r        distube.setVolume(message, args[0]);\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]},{"name":"percent","description":"The percentage of volume you want to set","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":569,"file":"DisTube.js","path":"src"}},{"name":"skip","description":"Skip the playing song","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"skip\")\r        distube.skip(message);\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":593,"file":"DisTube.js","path":"src"}},{"name":"shuffle","description":"Shuffle the guild queue songs","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"shuffle\")\r        distube.shuffle(message);\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":615,"file":"DisTube.js","path":"src"}},{"name":"jump","description":"Jump to the song number in the queue.\rThe next one is 1,...","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"jump\")\r        distube.jump(message, parseInt(args[0]))\r            .catch(err => message.channel.send(\"Invalid song number.\"));\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]},{"name":"num","description":"The song number to play","type":[[["number"]]]}],"returns":{"types":[[["Queue"]]],"description":"The guild queue"},"meta":{"line":644,"file":"DisTube.js","path":"src"}},{"name":"setRepeatMode","description":"Set the repeat mode of the guild queue.\rTurn off if repeat mode is the same value as new mode.\rToggle mode: `mode = null` `(0 -> 1 -> 2 -> 0...)`","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"repeat\") {\r        let mode = distube.setRepeatMode(message, parseInt(args[0]));\r        mode = mode ? mode == 2 ? \"Repeat queue\" : \"Repeat song\" : \"Off\";\r        message.channel.send(\"Set repeat mode to `\" + mode + \"`\");\r    }\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]},{"name":"mode","description":"The repeat modes `(0: disabled, 1: Repeat a song, 2: Repeat all the queue)`","default":null,"type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"The new repeat mode"},"meta":{"line":675,"file":"DisTube.js","path":"src"}},{"name":"toggleAutoplay","description":"Toggle autoplay mode","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command == \"autoplay\") {\r        let mode = distube.toggleAutoplay(message);\r        message.channel.send(\"Set autoplay mode to `\" + (mode ? \"On\" : \"Off\") + \"`\");\r    }\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["boolean"]]],"description":"Autoplay mode state"},"meta":{"line":701,"file":"DisTube.js","path":"src"}},{"name":"isPlaying","description":"Whether or not a guild is playing music.","params":[{"name":"message","description":"The message from guild channel to check","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the guild is playing song(s)"},"meta":{"line":713,"file":"DisTube.js","path":"src"}},{"name":"isPaused","description":"Whether or not the guild queue is paused","params":[{"name":"message","description":"The message from guild channel to check","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the guild queue is paused"},"meta":{"line":723,"file":"DisTube.js","path":"src"}},{"name":"_isVoiceChannelEmpty","description":"Whether or not the queue's voice channel is empty","access":"private","params":[{"name":"queue","description":"The guild queue","type":[[["Queue"]]]}],"returns":{"types":[[["boolean"]]],"description":"No user in voice channel return `true`"},"meta":{"line":735,"file":"DisTube.js","path":"src"}},{"name":"runAutoplay","description":"TODO: Remove this","deprecated":"use {@link DisTube#addRelatedVideo} instead","params":[{"name":"message","description":"Message","type":[[["DisTube","."],["Message"]]]}],"returns":[[["Promise","<"],["Queue",">"]]],"meta":{"line":747,"file":"DisTube.js","path":"src"}},{"name":"addRelatedVideo","description":"Add related song to the queue","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Snowflake"]],[["Discord","."],["Message"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Queue",">"]]],"description":"The guild queue"},"meta":{"line":758,"file":"DisTube.js","path":"src"}},{"name":"setFilter","description":"`@2.0.0` Enable or disable a filter of the queue, replay the playing song.\rAvailable filters: {@link Filter}","examples":["client.on('message', (message) => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if ([`3d`, `bassboost`, `echo`, `karaoke`, `nightcore`, `vaporwave`].includes(command)) {\r        let filter = distube.setFilter(message, command);\r        message.channel.send(\"Current queue filter: \" + (filter || \"Off\"));\r    }\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"filter","description":"A filter name","type":[[["Filter"]]]}],"returns":{"types":[[["string"]]],"description":"Current queue's filter name."},"meta":{"line":797,"file":"DisTube.js","path":"src"}},{"name":"seek","description":"`@2.7.0` Set the playing time to another position","examples":["client.on('message', message => {\r    if (!message.content.startsWith(config.prefix)) return;\r    const args = message.content.slice(config.prefix.length).trim().split(/ +/g);\r    const command = args.shift();\r    if (command = 'seek')\r        distube.seek(message, Number(args[0]));\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"time","description":"Time in milliseconds","type":[[["number"]]]}],"meta":{"line":822,"file":"DisTube.js","path":"src"}},{"name":"_emitError","description":"Emit error event","access":"private","meta":{"line":834,"file":"DisTube.js","path":"src"}},{"name":"_emitPlaySong","description":"Whether or not emit playSong event","access":"private","meta":{"line":844,"file":"DisTube.js","path":"src"}},{"name":"_createStream","description":"Create a ytdl stream","access":"private","meta":{"line":860,"file":"DisTube.js","path":"src"}},{"name":"_playSong","description":"Play a song on voice connection","access":"private","params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]}],"async":true,"meta":{"line":882,"file":"DisTube.js","path":"src"}},{"name":"_handleSongFinish","description":"Handle the queue when a Song finish","access":"private","params":[{"name":"message","description":"message","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"queue","type":[[["Queue"]]]}],"async":true,"meta":{"line":933,"file":"DisTube.js","path":"src"}},{"name":"_handlePlayingError","description":"Handle error while playing","access":"private","params":[{"name":"message","description":"message","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"queue","type":[[["Queue"]]]},{"name":"error","description":"error","default":null,"type":[[["Error"]]]}],"meta":{"line":970,"file":"DisTube.js","path":"src"}}],"events":[{"name":"addList","description":"Emitted after DisTube add playlist to guild queue","examples":["const status = (queue) => `Volume: \\`${queue.volume}%\\` | Loop: \\`${queue.repeatMode ? queue.repeatMode == 2 ? \"Server Queue\" : \"This Song\" : \"Off\"}\\` | Autoplay: \\`${queue.autoplay ? \"On\" : \"Off\"}\\``;\rdistube.on(\"addList\", (message, queue, playlist) => message.channel.send(\r    `Added \\`${playlist.name}\\` playlist (${playlist.songs.length} songs) to queue\\n${status(queue)}`\r));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"The guild queue","type":[[["Queue"]]]},{"name":"playlist","description":"Playlist info","type":[[["Playlist"]]]}],"meta":{"line":983,"file":"DisTube.js","path":"src"}},{"name":"addSong","description":"Emitted after DisTube add new song to guild queue","examples":["const status = (queue) => `Volume: \\`${queue.volume}%\\` | Loop: \\`${queue.repeatMode ? queue.repeatMode == 2 ? \"Server Queue\" : \"This Song\" : \"Off\"}\\` | Autoplay: \\`${queue.autoplay ? \"On\" : \"Off\"}\\``;\rdistube.on(\"addSong\", (message, queue, song) => message.channel.send(\r    `Added ${song.name} - \\`${song.formattedDuration}\\` to the queue by ${song.user}`\r));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"The guild queue","type":[[["Queue"]]]},{"name":"song","description":"Added song","type":[[["Song"]]]}],"meta":{"line":998,"file":"DisTube.js","path":"src"}},{"name":"empty","description":"Emitted when there is no user in VoiceChannel and {@link DisTubeOptions}.leaveOnEmpty is `true`.","examples":["distube.on(\"empty\", message => message.channel.send(\"Channel is empty. Leaving the channel\"))"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]}],"meta":{"line":1012,"file":"DisTube.js","path":"src"}},{"name":"error","description":"Emitted when {@link DisTube} encounters an error.","examples":["distube.on(\"error\", (message, err) => message.channel.send(\r    \"An error encountered: \" + err\r));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"err","description":"The error encountered","type":[[["Error"]]]}],"meta":{"line":1021,"file":"DisTube.js","path":"src"}},{"name":"finish","description":"Emitted when there is no more song in the queue and {@link Queue#autoplay} is `false`.\rDisTube will leave voice channel if {@link DisTubeOptions}.leaveOnFinish is `true`","examples":["distube.on(\"finish\", message => message.channel.send(\"No more song in queue\"));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]}],"meta":{"line":1033,"file":"DisTube.js","path":"src"}},{"name":"initQueue","description":"`@2.3.0` Emitted when DisTube initialize a queue to change queue default properties.","examples":["distube.on(\"initQueue\", queue => {\r    queue.autoplay = false;\r    queue.volume = 100;\r});"],"params":[{"name":"queue","description":"The guild queue","type":[[["Queue"]]]}],"meta":{"line":1043,"file":"DisTube.js","path":"src"}},{"name":"noRelated","description":"Emitted when {@link Queue#autoplay} is `true`, the {@link Queue#songs} is empty and\rDisTube cannot find related songs to play","examples":["distube.on(\"noRelated\", message => message.channel.send(\"Can't find related video to play. Stop playing music.\"));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]}],"meta":{"line":1055,"file":"DisTube.js","path":"src"}},{"name":"playList","description":"Emitted after DisTube play the first song of the playlist\rand add the rest to the guild queue","examples":["const status = (queue) => `Volume: \\`${queue.volume}%\\` | Loop: \\`${queue.repeatMode ? queue.repeatMode == 2 ? \"Server Queue\" : \"This Song\" : \"Off\"}\\` | Autoplay: \\`${queue.autoplay ? \"On\" : \"Off\"}\\``;\rdistube.on(\"playList\", (message, queue, playlist, song) => message.channel.send(\r    `Play \\`${playlist.name}\\` playlist (${playlist.songs.length} songs).\\nRequested by: ${song.user}\\nNow playing \\`${song.name}\\` - \\`${song.formattedDuration}\\`\\n${status(queue)}`\r));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"The guild queue","type":[[["Queue"]]]},{"name":"playlist","description":"Playlist info","type":[[["Playlist"]]]},{"name":"song","description":"Playing song","type":[[["Song"]]]}],"meta":{"line":1065,"file":"DisTube.js","path":"src"}},{"name":"playSong","description":"Emitted when DisTube play a song.\rIf {@link DisTubeOptions}.emitNewSongOnly is `true`, event is not emitted when looping a song or next song is the previous one","examples":["const status = (queue) => `Volume: \\`${queue.volume}%\\` | Loop: \\`${queue.repeatMode ? queue.repeatMode == 2 ? \"Server Queue\" : \"This Song\" : \"Off\"}\\` | Autoplay: \\`${queue.autoplay ? \"On\" : \"Off\"}\\``;\rdistube.on(\"playSong\", (message, queue, song) => message.channel.send(\r    `Playing \\`${song.name}\\` - \\`${song.formattedDuration}\\`\\nRequested by: ${song.user}\\n${status(queue)}`\r));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"queue","description":"The guild queue","type":[[["Queue"]]]},{"name":"song","description":"Playing song","type":[[["Song"]]]}],"meta":{"line":1081,"file":"DisTube.js","path":"src"}},{"name":"searchCancel","description":"Emitted when {@link DisTubeOptions}.searchSongs is `true`.\rSearch will be canceled if user's next message is invalid number or timeout (60s)","examples":["// DisTubeOptions.searchSongs = true\rdistube.on(\"searchCancel\", (message) => message.channel.send(`Searching canceled`));"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]}],"meta":{"line":1096,"file":"DisTube.js","path":"src"}},{"name":"searchResult","description":"Emitted when {@link DisTubeOptions}.searchSongs is `true`.\rDisTube will wait for user's next message to choose song manually\rif song param of {@link DisTube#play|play()} is invalid url","examples":["// DisTubeOptions.searchSongs = true\rdistube.on(\"searchResult\", (message, result) => {\r    let i = 0;\r    message.channel.send(`**Choose an option from below**\\n${result.map(song => `**${++i}**. ${song.name} - \\`${song.formattedDuration}\\``).join(\"\\n\")}\\n*Enter anything else or wait 60 seconds to cancel*`);\r});"],"params":[{"name":"message","description":"The message from guild channel","type":[[["Discord","."],["Message"]]]},{"name":"result","description":"Searched result (max length = 12)","type":[[["Array","<"],["SearchResult",">"]]]}],"meta":{"line":1107,"file":"DisTube.js","path":"src"}}],"meta":{"line":97,"file":"DisTube.js","path":"src"}},{"name":"Playlist","description":"Class representing a playlist.","construct":{"name":"Playlist","description":"Create a playlist","params":[{"name":"playlist","description":"Playlist","type":[[["ytpl","."],["result"]],[["Array","<"],["Song",">"]]]},{"name":"user","description":"Requested user","type":[[["Discord","."],["User"]]]},{"name":"properties","description":"Custom properties","type":[[["Object"]]]}]},"props":[{"name":"user","description":"User requested.","type":[[["Discord","."],["User"]]],"meta":{"line":35,"file":"Playlist.js","path":"src"}},{"name":"songs","description":"Playlist songs.","type":[[["Array","<"],["Song",">"]]],"meta":{"line":40,"file":"Playlist.js","path":"src"}},{"name":"name","description":"Playlist name.","type":[[["string"]]],"meta":{"line":46,"file":"Playlist.js","path":"src"}},{"name":"url","description":"Playlist URL.","type":[[["string"]]],"meta":{"line":51,"file":"Playlist.js","path":"src"}},{"name":"thumbnail","description":"Playlist thumbnail.","type":[[["string"]]],"meta":{"line":56,"file":"Playlist.js","path":"src"}},{"name":"title","deprecated":"use `Playlist.name` instead","type":[[["string"]]],"meta":{"line":64,"file":"Playlist.js","path":"src"}},{"name":"items","deprecated":"use `Playlist.songs` instead","type":[[["Array","<"],["Song",">"]]],"meta":{"line":69,"file":"Playlist.js","path":"src"}},{"name":"total_items","deprecated":"use `Playlist.songs.length` instead","type":[[["number"]]],"meta":{"line":74,"file":"Playlist.js","path":"src"}},{"name":"id","deprecated":true,"type":[[["string"]]],"meta":{"line":79,"file":"Playlist.js","path":"src"}},{"name":"author","deprecated":true,"type":[[["object"]]],"meta":{"line":84,"file":"Playlist.js","path":"src"}},{"name":"duration","description":"Playlist duration in second.","type":[[["number"]]],"meta":{"line":93,"file":"Playlist.js","path":"src"}},{"name":"formattedDuration","description":"Formatted duration string `hh:mm:ss`.","type":[[["string"]]],"meta":{"line":102,"file":"Playlist.js","path":"src"}}],"meta":{"line":23,"file":"Playlist.js","path":"src"}},{"name":"Queue","description":"Represents a queue.","construct":{"name":"Queue","description":"Create a queue.","params":[{"name":"message","description":"Discord.Message","type":[[["Discord","."],["Message"]]]},{"name":"song","description":"The first Song of the Queue","type":[[["Song"]]]}]},"props":[{"name":"dispatcher","description":"Stream dispatcher.","type":[[["Discord","."],["StreamDispatcher"]]],"meta":{"line":21,"file":"Queue.js","path":"src"}},{"name":"connection","description":"Voice connection.","type":[[["Discord","."],["VoiceConnection"]]],"meta":{"line":26,"file":"Queue.js","path":"src"}},{"name":"volume","description":"Stream volume.","type":[[["number"]]],"meta":{"line":31,"file":"Queue.js","path":"src"}},{"name":"songs","description":"List of songs","type":[[["Array","<"],["Song",">"]]],"meta":{"line":36,"file":"Queue.js","path":"src"}},{"name":"stopped","description":"Whether stream is currently stopped.","type":[[["boolean"]]],"meta":{"line":41,"file":"Queue.js","path":"src"}},{"name":"skipped","description":"Whether or not the last song was skipped.","type":[[["boolean"]]],"meta":{"line":46,"file":"Queue.js","path":"src"}},{"name":"playing","description":"Whether or not the stream is currently playing.","type":[[["boolean"]]],"meta":{"line":51,"file":"Queue.js","path":"src"}},{"name":"pause","description":"Whether or not the stream is currently paused.","type":[[["boolean"]]],"meta":{"line":56,"file":"Queue.js","path":"src"}},{"name":"repeatMode","description":"Type of repeat mode (0 is disabled, 1 is repeating a song, 2 is repeating all the playlist)","type":[[["number"]]],"meta":{"line":61,"file":"Queue.js","path":"src"}},{"name":"autoplay","description":"Whether or not the autoplay mode is enabled.","type":[[["boolean"]]],"meta":{"line":66,"file":"Queue.js","path":"src"}},{"name":"filter","description":"`@2.0.0` Queue audio filter.\rAvailable filters: {@link Filter}","type":[[["DisTube","."],["Filter"]]],"meta":{"line":72,"file":"Queue.js","path":"src"}},{"name":"initMessage","description":"`@2.2.0` Message which initialize the queue","type":[[["Discord","."],["Message"]]],"meta":{"line":77,"file":"Queue.js","path":"src"}},{"name":"stream","description":"`@2.5.0` ytdl stream","type":[[["Readable"]]],"meta":{"line":82,"file":"Queue.js","path":"src"}},{"name":"beginTime","description":"`@2.7.0` What time in the song to begin (in milliseconds).","type":[[["number"]]],"meta":{"line":87,"file":"Queue.js","path":"src"}},{"name":"formattedDuration","description":"Formatted duration string.","type":[[["string"]]],"meta":{"line":94,"file":"Queue.js","path":"src"}},{"name":"duration","description":"Queue's duration.","type":[[["number"]]],"meta":{"line":101,"file":"Queue.js","path":"src"}},{"name":"currentTime","description":"`@2.7.0` What time in the song is playing (in milliseconds).","type":[[["number"]]],"meta":{"line":108,"file":"Queue.js","path":"src"}},{"name":"formattedCurrentTime","description":"`@2.8.0` Formatted {@link Queue#currentTime} string.","type":[[["string"]]],"meta":{"line":115,"file":"Queue.js","path":"src"}}],"meta":{"line":10,"file":"Queue.js","path":"src"}},{"name":"SearchResult","description":"`@2.7.0` Class representing a search result.","construct":{"name":"SearchResult","description":"Create a search result.","params":[{"name":"info","description":"Video info","type":[[["ytsr","."],["Video"]]]}]},"props":[{"name":"id","description":"Youtube video id","type":[[["string"]]],"meta":{"line":31,"file":"SearchResult.js","path":"src"}},{"name":"name","description":"Song name aka video title.","type":[[["string"]]],"meta":{"line":36,"file":"SearchResult.js","path":"src"}},{"name":"duration","description":"Song duration.","type":[[["number"]]],"meta":{"line":41,"file":"SearchResult.js","path":"src"}},{"name":"formattedDuration","description":"Formatted duration string `hh:mm:ss` or `mm:ss`.","type":[[["string"]]],"meta":{"line":46,"file":"SearchResult.js","path":"src"}},{"name":"url","description":"Song URL.","type":[[["string"]]],"meta":{"line":51,"file":"SearchResult.js","path":"src"}},{"name":"thumbnail","description":"Song thumbnail.","type":[[["string"]]],"meta":{"line":56,"file":"SearchResult.js","path":"src"}},{"name":"isLive","description":"Indicates if the video is an active live.","type":[[["boolean"]]],"meta":{"line":61,"file":"SearchResult.js","path":"src"}},{"name":"views","description":"Song views count","type":[[["number"]]],"meta":{"line":66,"file":"SearchResult.js","path":"src"}},{"name":"title","deprecated":"use `Song.name` instead","type":[[["string"]]],"meta":{"line":71,"file":"SearchResult.js","path":"src"}},{"name":"link","deprecated":"use `Song.url` instead","type":[[["string"]]],"meta":{"line":76,"file":"SearchResult.js","path":"src"}}],"meta":{"line":21,"file":"SearchResult.js","path":"src"}},{"name":"Song","description":"Class representing a song.","construct":{"name":"Song","description":"Create a song.","params":[{"name":"info","description":"Video info","type":[[["ytdl","."],["videoInfo"]],[["Object"]]]},{"name":"user","description":"Requested user","type":[[["Discord","."],["User"]]]},{"name":"youtube","description":"Weather or not the video is a Youtube video.","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"youtube","description":"`@2.6.0` Weather or not the video is a Youtube video.","type":[[["boolean"]]],"meta":{"line":38,"file":"Song.js","path":"src"}},{"name":"user","description":"User requested","type":[[["Discord","."],["User"]]],"meta":{"line":47,"file":"Song.js","path":"src"}},{"name":"id","description":"`@2.1.4` Youtube video id","type":[[["string"]]],"meta":{"line":52,"file":"Song.js","path":"src"}},{"name":"name","description":"Song name aka video title.","type":[[["string"]]],"meta":{"line":57,"file":"Song.js","path":"src"}},{"name":"isLive","description":"`@2.5.0` Indicates if the video is an active live.","type":[[["boolean"]]],"meta":{"line":62,"file":"Song.js","path":"src"}},{"name":"duration","description":"Song duration.","type":[[["number"]]],"meta":{"line":67,"file":"Song.js","path":"src"}},{"name":"formattedDuration","description":"Formatted duration string `hh:mm:ss` or `mm:ss`.","type":[[["string"]]],"meta":{"line":72,"file":"Song.js","path":"src"}},{"name":"url","description":"Song URL.","type":[[["string"]]],"meta":{"line":77,"file":"Song.js","path":"src"}},{"name":"streamURL","description":"`@2.6.0` Stream / Download URL.","nullable":true,"type":[[["string"]]],"meta":{"line":82,"file":"Song.js","path":"src"}},{"name":"thumbnail","description":"Song thumbnail.","nullable":true,"type":[[["string"]]],"meta":{"line":90,"file":"Song.js","path":"src"}},{"name":"related","description":"Related videos (Only available with YouTube video)","nullable":true,"type":[[["Array","<"],["ytdl","."],["relatedVideo",">"]]],"meta":{"line":95,"file":"Song.js","path":"src"}},{"name":"views","description":"`@2.6.0` Song views count","type":[[["number"]]],"meta":{"line":100,"file":"Song.js","path":"src"}},{"name":"plays","deprecated":"use `Song.views` instead","type":[[["number"]]],"meta":{"line":105,"file":"Song.js","path":"src"}},{"name":"likes","description":"`@2.6.0` Song like count","type":[[["number"]]],"meta":{"line":110,"file":"Song.js","path":"src"}},{"name":"dislikes","description":"`@2.6.0` Song dislike count","type":[[["number"]]],"meta":{"line":115,"file":"Song.js","path":"src"}},{"name":"reposts","description":"`@2.6.0` Song repost count","type":[[["number"]]],"meta":{"line":120,"file":"Song.js","path":"src"}},{"name":"title","deprecated":"use `Song.name` instead","type":[[["string"]]],"meta":{"line":125,"file":"Song.js","path":"src"}},{"name":"link","deprecated":"use `Song.url` instead","type":[[["string"]]],"meta":{"line":130,"file":"Song.js","path":"src"}}],"meta":{"line":26,"file":"Song.js","path":"src"}}],"interfaces":[],"typedefs":[{"name":"DisTubeOptions","description":"DisTube options.","type":[[["object"]]],"props":[{"name":"emitNewSongOnly","description":"`@1.3.0`. If `true`, {@link DisTube#event:playSong} is not emitted when looping a song or next song is the same as the previous one","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"highWaterMark","description":"`@2.2.0` ytdl's highWaterMark option.","optional":true,"default":"1<<24","type":[[["number"]]]},{"name":"leaveOnEmpty","description":"Whether or not leaving voice channel if channel is empty in 60s. (Avoid accident leaving)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"leaveOnFinish","description":"Whether or not leaving voice channel when the queue ends.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"leaveOnStop","description":"Whether or not leaving voice channel after using {@link DisTube#stop|stop()} function.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"searchSongs","description":"Whether or not searching for multiple songs to select manually, DisTube will play the first result if `false`","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"youtubeCookie","description":"`@2.4.0` YouTube cookies. How to get it: {@link https://github.com/fent/node-ytdl-core/blob/784c04eaf9f3cfac0fe0933155adffe0e2e0848a/example/cookies.js#L6-L12|YTDL's Example}","optional":true,"default":null,"type":[[["string"]]]},{"name":"youtubeIdentityToken","description":"`@2.4.0` If not given, ytdl-core will try to find it. You can find this by going to a video's watch page, viewing the source, and searching for \"ID_TOKEN\".","optional":true,"default":null,"type":[[["string"]]]},{"name":"youtubeDL","description":"`@2.8.0` Whether or not using youtube-dl.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"updateYouTubeDL","description":"`@2.8.0` Whether or not updating youtube-dl automatically.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"customFilters","description":"`@2.7.0` Override or add more ffmpeg filters. Example: `{ \"Filter name\": \"Filter value\", \"8d\": \"apulsator=hz=0.075\" }`","optional":true,"type":[[["Object","<"],["string",", "],["string",">"]]]}],"meta":{"line":27,"file":"DisTube.js","path":"src"}},{"name":"Filter","description":"DisTube audio filters.","type":[[["\"3d","\""]],[["\"bassboost","\""]],[["\"echo","\""]],[["\"karaoke","\""]],[["\"nightcore","\""]],[["\"vaporwave","\""]],[["\"flanger","\""]],[["\"gate","\""]],[["\"haas","\""]],[["\"reverse","\""]],[["\"surround","\""]],[["\"mcompand","\""]],[["\"phaser","\""]],[["\"tremolo","\""]],[["\"earwax","\""]],[["string"]]],"props":[{"name":"3d","description":"`@2.0.0`","type":[[["string"]]]},{"name":"bassboost","description":"`@2.0.0`","type":[[["string"]]]},{"name":"echo","description":"`@2.0.0`","type":[[["string"]]]},{"name":"karaoke","description":"`@2.0.0`","type":[[["string"]]]},{"name":"nightcore","description":"`@2.0.0`","type":[[["string"]]]},{"name":"vaporwave","description":"`@2.0.0`","type":[[["string"]]]},{"name":"flanger","description":"`@2.4.0`","type":[[["string"]]]},{"name":"gate","description":"`@2.4.0`","type":[[["string"]]]},{"name":"haas","description":"`@2.4.0`","type":[[["string"]]]},{"name":"reverse","description":"`@2.4.0`","type":[[["string"]]]},{"name":"surround","description":"`@2.7.0`","type":[[["string"]]]},{"name":"mcompand","description":"`@2.7.0`","type":[[["string"]]]},{"name":"phaser","description":"`@2.7.0`","type":[[["string"]]]},{"name":"tremolo","description":"`@2.7.0`","type":[[["string"]]]},{"name":"earwax","description":"`@2.7.0`","type":[[["string"]]]}],"meta":{"line":56,"file":"DisTube.js","path":"src"}}],"externals":[]}